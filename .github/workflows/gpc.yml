# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Push Angular image to Google Cloud Platform

on:
  push:
    branches: [ main ]

jobs:
  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: vehicle-fe
      PROJECT_ID: vehicle-test-418415 # EZ A PROJECT ID A GCP-n
    steps:
    #checkout the repository
    - name: Checkout
      uses: actions/checkout@v3

    #configure the gcp acces for github actions workflow
    - uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true
    
    #Build docker image
    - name: Build Docker image
      run: docker build -t $IMAGE_NAME:latest .
    
    #Configure Docker client
    - name:  Configure Docker client
      run: |-
      
        gcloud auth configure-docker us-west2-docker.pkg.dev --quiet
    # gcloud auth configure-docker --quiet
    
    # - name: Push Docker Image to Container Registry (GCR)
    #   env:
    #     GIT_TAG: v0.1.0
    #   run: |-
    #     docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
    #     docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
    #     docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
    #     docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
    
    - name: Push Docker Image to Artifact Registry
      env:
        GIT_TAG: v0.1.0
      run: |-
        docker tag $IMAGE_NAME:latest us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        docker tag $IMAGE_NAME:latest us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
        docker push us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        docker push us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
